package com.example.mud.controller;
import java.util.*;

// Класс Item представляет предмет в игре
class Item {
    private String name;

    public Item(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

// Класс Room представляет комнату с описанием, предметами и соединениями
class Room {
    private String description;
    private Map<String, Room> connections;
    private List<Item> items;

    public Room(String description) {
        this.description = description;
        this.connections = new HashMap<>();
        this.items = new ArrayList<>();
    }

    public String getDescription() {
        return description + "\nItems here: " + (items.isEmpty() ? "None" : items.toString());
    }

    // Добавляет соединение с другой комнатой в заданном направлении
    public void addConnection(String direction, Room room) {
        connections.put(direction, room);
    }

    public Room getConnectedRoom(String direction) {
        return connections.get(direction);
    }

    // Добавляет предмет в комнату
    public void addItem(Item item) {
        items.add(item);
    }

    // Удаляет предмет из комнаты и возвращает его
    public Item removeItem(String itemName) {
        for (Item item : items) {
            if (item.getName().equalsIgnoreCase(itemName)) {
                items.remove(item);
                return item;
            }
        }
        return null;
    }
}

// Класс Player представляет игрока с его текущей комнатой и инвентарем
class Player {
    private Room currentRoom;
    private List<Item> inventory;

    public Player(Room startRoom) {
        this.currentRoom = startRoom;
        this.inventory = new ArrayList<>();
    }

    public Room getCurrentRoom() {
        return currentRoom;
    }

    public void setCurrentRoom(Room room) {
        this.currentRoom = room;
    }

    public void addItem(Item item) {
        inventory.add(item);
    }

    // Выводит список предметов в инвентаре
    public void showInventory() {
        System.out.println("You are carrying: " + (inventory.isEmpty() ? "Nothing" : inventory));
    }
}

// Главный контроллер игры, обрабатывает команды пользователя
public class MUDController {
    private Player player;
    private boolean running;
    private Scanner scanner;

    public MUDController(Player player) {
        this.player = player;
        this.running = true;
        this.scanner = new Scanner(System.in);
    }

    // Основной игровой цикл
    public void runGameLoop() {
        System.out.println("Welcome to the MUD game! Type 'help' for a list of commands.");
        while (running) {
            System.out.print("> ");
            String input = scanner.nextLine().trim();
            handleInput(input);
        }
    }

    // Обрабатывает ввод пользователя
    private void handleInput(String input) {
        String[] parts = input.split(" ", 2);
        String command = parts[0].toLowerCase();
        String argument = (parts.length > 1) ? parts[1] : "";

        switch (command) {
            case "look":
                lookAround();
                break;
            case "move":
                move(argument);
                break;
            case "pick":
                pickUp(argument);
                break;
            case "inventory":
                checkInventory();
                break;
            case "help":
                showHelp();
                break;
            case "quit":
            case "exit":
                running = false;
                System.out.println("Goodbye!");
                break;
            default:
                System.out.println("Unknown command. Type 'help' for a list of commands.");
        }
    }

    // Описывает текущую комнату
    private void lookAround() {
        Room currentRoom = player.getCurrentRoom();
        System.out.println(currentRoom.getDescription());
    }

    // Перемещает игрока в другую комнату
    private void move(String direction) {
        if (direction.isEmpty()) {
            System.out.println("Move where? (forward, back, left, right)");
            return;
        }
        Room nextRoom = player.getCurrentRoom().getConnectedRoom(direction);
        if (nextRoom != null) {
            player.setCurrentRoom(nextRoom);
            System.out.println("You moved " + direction + ".");
        } else {
            System.out.println("You can't go that way!");
        }
    }

    // Позволяет игроку подобрать предмет из комнаты
    private void pickUp(String itemName) {
        if (itemName.isEmpty()) {
            System.out.println("Pick up what?");
            return;
        }
        Room currentRoom = player.getCurrentRoom();
        Item item = currentRoom.removeItem(itemName);
        if (item != null) {
            player.addItem(item);
            System.out.println("You picked up the " + itemName + ".");
        } else {
            System.out.println("No item named " + itemName + " here!");
        }
    }

    // Показывает содержимое инвентаря игрока
    private void checkInventory() {
        player.showInventory();
    }

    // Выводит список доступных команд
    private void showHelp() {
        System.out.println("Available commands:");
        System.out.println("look - Describe the current room");
        System.out.println("move <direction> - Move to a new room (forward, back, left, right)");
        System.out.println("pick up <item> - Pick up an item");
        System.out.println("inventory - Show your items");
        System.out.println("help - Show this help menu");
        System.out.println("quit / exit - Leave the game");
    }
}
